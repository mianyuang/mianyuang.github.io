(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{496:function(t,e,a){"use strict";a.r(e);var r=a(65),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-路由"}},[t._v("#")]),t._v(" React-路由")]),t._v(" "),a("h4",{attrs:{id:"路由原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由原理"}},[t._v("#")]),t._v(" 路由原理")]),t._v(" "),a("p",[t._v("使用浏览器"),a("code",[t._v("windows.history")]),t._v("对象，通过监听地址栏地址的变化，使得页面在指定位置跳转到相应的组件。")]),t._v(" "),a("h4",{attrs:{id:"react-router的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-router的理解"}},[t._v("#")]),t._v(" react-router的理解")]),t._v(" "),a("p",[t._v("react-router分为三种，一种是专门为web服务的react-router-dom，一种是为native原生服务的，另一种是any，任意都可以。")]),t._v(" "),a("h4",{attrs:{id:"react-router-dom的基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-router-dom的基本使用"}},[t._v("#")]),t._v(" react-router-dom的基本使用")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("路由组件需要包裹在"),a("code",[t._v("BrowserRouter")]),t._v("组件或者"),a("code",[t._v("HashRouter")]),t._v("组件里才能正确使用，所以要在"),a("code",[t._v("index.jsx")]),t._v("入口文件在"),a("code",[t._v("app")]),t._v("组件外部包裹"),a("code",[t._v("BrowserRouter")]),t._v("组件或者"),a("code",[t._v("HashRouter")]),t._v("组件。")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n);\n")])])])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("code",[t._v("Link")]),t._v("组件可以做路由导航，"),a("code",[t._v("Route")]),t._v("组件可以导航到相应的组件。")]),t._v(" "),a("p",[a("code",[t._v("Link")]),t._v("组件中接收一个"),a("code",[t._v("to")]),t._v("属性表示要跳转到的地址")]),t._v(" "),a("p",[a("code",[t._v("Route")]),t._v("组件接收一个"),a("code",[t._v("path")]),t._v("属性表示对应的地址，"),a("code",[t._v("component")]),t._v("属性表示该地址对应的组件")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import React,{Component} from "react";\nimport {Link,Route} from \'react-router-dom\'\nimport About from \'./components/About\'\nimport Home from \'./components/Home\'\nimport \'./app.css\'\nexport default class App extends Component{\n    render(){\n        return (\n           <div className="app-container">\n                <div className="flex-container">\n                    <div>\n                        <Link to="/home" style={{display:\'block\'}}>home</Link>\n                        <Link to="/about" style={{display:\'block\'}}>about</Link>\n                    </div>\n                    <div>\n                        <Route path="/home" component={Home} />\n                        <Route path="/about" component={About} />\n                    </div>\n                </div>\n           </div>\n        )\n    }\n}\n\n')])])])])]),t._v(" "),a("h4",{attrs:{id:"一般组件和路由组件区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般组件和路由组件区别"}},[t._v("#")]),t._v(" 一般组件和路由组件区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("写法不同")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("一般组件："),a("code",[t._v("<Home />")])])]),t._v(" "),a("li",[a("p",[t._v("路由组件："),a("code",[t._v('<Route to="/hone" component={Home} />')])])])])]),t._v(" "),a("li",[a("p",[t._v("存放的位置不同")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("一般组件：存放于component中")])]),t._v(" "),a("li",[a("p",[t._v("路由组件：一般存放于pages文件夹中")])])])]),t._v(" "),a("li",[a("p",[t._v("接收到的props属性不同")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("一般组件：写组件标签时传递了什么，就接收到了什么")])]),t._v(" "),a("li",[a("p",[t._v("路由组件：接收到三个固定的属性")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("history")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("location")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("match")])])])])])])])]),t._v(" "),a("h4",{attrs:{id:"navlink组件的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navlink组件的使用"}},[t._v("#")]),t._v(" NavLink组件的使用")]),t._v(" "),a("p",[t._v("由于"),a("code",[t._v("Link")]),t._v("组件是没有点击时命中高亮的效果，可以使用"),a("code",[t._v("NavLink")]),t._v("替换"),a("code",[t._v("Link")]),t._v("，使得点击时有高亮效果，可以自己定义样式，根据"),a("code",[t._v("activeClassName")]),t._v("属性来配置样式效果。")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<NavLink activeClassName="demo" to="/home">Home</NavLink>\n.demo{\n  background-color:blue;\n  color:white;\n}\n')])])]),a("h4",{attrs:{id:"二次封装navlink组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二次封装navlink组件"}},[t._v("#")]),t._v(" 二次封装navLink组件")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport default class MyNavLink extends Component {\n  render() {\n    return (\n      <NavLink {...this.props}/>\n    )\n  }\n}\n\n")])])]),a("p",[t._v("使用二次封装的"),a("code",[t._v("MyNavLink")]),t._v("组件")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' <MyNavLink to="/home">home</MyNavLink>\n')])])]),a("p",[t._v("说明：")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("MyNavLink")]),t._v("组件在使用时，会把"),a("code",[t._v("MyNavLink")]),t._v("标签体内容home放入到"),a("code",[t._v("props")]),t._v("中的"),a("code",[t._v("children")]),t._v("属性。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("<NavLink {...this.props}/>")]),t._v("会把传入的属性都传入"),a("code",[t._v("NavLink")]),t._v("属性，会把"),a("code",[t._v("children")]),t._v("属性展示为"),a("code",[t._v("NavLink")]),t._v("组件的标签体内容。")])])]),t._v(" "),a("h4",{attrs:{id:"switch组件的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch组件的使用"}},[t._v("#")]),t._v(" Switch组件的使用")]),t._v(" "),a("p",[t._v("解决路由匹配效率问题，当匹配到第一个符合的路由路径组件时，就不再往下进行匹配。")]),t._v(" "),a("p",[t._v("使用方式：")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("Route")]),t._v("组件外包裹一个"),a("code",[t._v("Switch")]),t._v("组件就可以。")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Switch>\n    <Route path="/home" component={Home} />\n    <Route path="/about" component={About} />\n</Switch>\n')])])]),a("h4",{attrs:{id:"多级路径刷新页面样式丢失问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多级路径刷新页面样式丢失问题"}},[t._v("#")]),t._v(" 多级路径刷新页面样式丢失问题")]),t._v(" "),a("p",[t._v("刷新后，由于获取样式网络请求路径不对，请求不到所在的样式文件，请求不存在的路径内容，"),a("code",[t._v("webpack")]),t._v("机制默认返回"),a("code",[t._v("public")]),t._v("下的"),a("code",[t._v("index.html")]),t._v("文件。")]),t._v(" "),a("p",[t._v("解决办法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在"),a("code",[t._v("index.html")]),t._v("中引入样式时不写"),a("code",[t._v("./")]),t._v("，写"),a("code",[t._v("/")])])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v("index.html")]),t._v("中引入样式时不写"),a("code",[t._v("./")]),t._v("，写"),a("code",[t._v("%PUBLIC_URL%")])])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("code",[t._v("HashRouter")]),t._v("，不使用"),a("code",[t._v("BroswerRouter")])])])]),t._v(" "),a("h4",{attrs:{id:"路由模糊匹配和严格匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由模糊匹配和严格匹配"}},[t._v("#")]),t._v(" 路由模糊匹配和严格匹配")]),t._v(" "),a("p",[a("code",[t._v("Route")]),t._v("组件默认是模糊匹配，想要开启严格匹配，需要添加"),a("code",[t._v("exact")]),t._v("属性即可。")]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：")]),t._v(" "),a("p",[t._v("严格匹配需小心使用，不然容易引起严重问题。")]),t._v(" "),a("h4",{attrs:{id:"redirect组件的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redirect组件的使用"}},[t._v("#")]),t._v(" Redirect组件的使用")]),t._v(" "),a("p",[t._v("一般卸载所以注册路由组件的最下方，当所有路由都不匹配时，跳转到"),a("code",[t._v("Redirect")]),t._v("组件指定的组件。")]),t._v(" "),a("p",[t._v("使用方法：")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Redirect to="about" />\n')])])]),a("h4",{attrs:{id:"嵌套路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路由"}},[t._v("#")]),t._v(" 嵌套路由")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("注册子路由时要写上父路由的path值")])]),t._v(" "),a("li",[a("p",[t._v("路由匹配是按照注册路由的顺序进行的")])])]),t._v(" "),a("h4",{attrs:{id:"向路由组件传递参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向路由组件传递参数"}},[t._v("#")]),t._v(" 向路由组件传递参数")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("传递params参数")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Link组件添加要传递的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<Link to={`/home/message/detail/${id}/${title}`} />\n")])])])]),t._v(" "),a("li",[a("p",[t._v("注册路由组件Route声明要接收的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Route path="/home/message/detail/:id/:title" component={Detail} />\n')])])])]),t._v(" "),a("li",[a("p",[t._v("在路由组件中props的match.params中得到传递过来的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.props.match.params. //可得到传递过来的params参数\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("传递search参数")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Link组件添加要传递的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<Link to={`/home/message/detail/?id=1&title=xxx`} />\n")])])])]),t._v(" "),a("li",[a("p",[t._v("注册路由组件Route无需声明要接收的参数")])]),t._v(" "),a("li",[a("p",[t._v("在路由组件中props的localtion.search中得到传递过来的search参数，再通过react带的querystring库解析")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const {search} = this.props.location\nconst result = qs.parse(search.slice(1))\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("传递state参数")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Link组件添加要传递的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<Link to={{pathname:'/home/message/detail',state:{id:1,title:'xx'}}} />\n")])])])]),t._v(" "),a("li",[a("p",[t._v("注册路由组件Route无需声明要接收的参数")])]),t._v(" "),a("li",[a("p",[t._v("在路由组件中props的location.state中得到传递过来的参数")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.props.location.state. //可得到传递过来的state参数\n")])])])])])])]),t._v(" "),a("h4",{attrs:{id:"编程式路由导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程式路由导航"}},[t._v("#")]),t._v(" 编程式路由导航")]),t._v(" "),a("p",[t._v("借助"),a("code",[t._v("this.props.location")]),t._v("对象上的API对操作路由跳转，前进、后退。")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("push(path,state)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("replace(path,state)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("go(n)")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("goBack()")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("goForward()")])])])]),t._v(" "),a("h4",{attrs:{id:"withrouter的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withrouter的使用"}},[t._v("#")]),t._v(" withRouter的使用")]),t._v(" "),a("p",[t._v("withRouter方法可以加工一般组件，使其具有路由组件的某些API进行路由操作。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("引入withRouter")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {withRouter} from 'react-router-dom'\n")])])])]),t._v(" "),a("li",[a("p",[t._v("使用withRouter")]),t._v(" "),a("div",{staticClass:"language-react&#x20;jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Header extends Component {\n  .........\n}\nexport default withRouter(Header)\n")])])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);