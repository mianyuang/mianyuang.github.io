(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{464:function(t,e,n){t.exports=n.p+"assets/img/1.55eebbe4.png"},465:function(t,e,n){t.exports=n.p+"assets/img/2.094e8b0d.png"},466:function(t,e,n){t.exports=n.p+"assets/img/3.03732d3c.png"},500:function(t,e,n){"use strict";n.r(e);var r=n(65),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"redux-状态管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-状态管理"}},[t._v("#")]),t._v(" redux-状态管理")]),t._v(" "),r("h4",{attrs:{id:"什么是redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是redux"}},[t._v("#")]),t._v(" 什么是redux")]),t._v(" "),r("p",[t._v("redux是一个专门用于做状态管理的js库（不是react插件库），它可以应用在vue，react，angular等项目中。")]),t._v(" "),r("p",[t._v("作用：集中式管理react应用中多个组件共享的状态。")]),t._v(" "),r("h4",{attrs:{id:"什么情况下需要使用redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下需要使用redux"}},[t._v("#")]),t._v(" 什么情况下需要使用redux")]),t._v(" "),r("ol",[r("li",[r("p",[r("strong",[t._v("某个组件的状态，需要让其他组件可以随时拿到（共享）")])])]),t._v(" "),r("li",[r("p",[t._v("一个组件需要改变另一个组件的状态（通信）")])]),t._v(" "),r("li",[r("p",[t._v("总体原则：能不用就不用，如果不用比较吃力才考虑使用")])])]),t._v(" "),r("h4",{attrs:{id:"redux原理图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux原理图"}},[t._v("#")]),t._v(" redux原理图")]),t._v(" "),r("p",[r("img",{attrs:{src:n(464),alt:""}})]),t._v(" "),r("h4",{attrs:{id:"redux的三个核心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux的三个核心"}},[t._v("#")]),t._v(" redux的三个核心")]),t._v(" "),r("p",[r("strong",[t._v("action")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("动作的对象")])]),t._v(" "),r("li",[r("p",[t._v("包含的属性")]),t._v(" "),r("ol",[r("li",[t._v("type:")])])]),t._v(" "),r("li",[r("p",[t._v("例子：{type:'ADD_STUDENT',data:{name:'xxx',age:18}}")])])]),t._v(" "),r("p",[r("strong",[t._v("reducer")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("用于初始化状态、加工状态")])]),t._v(" "),r("li",[r("p",[t._v("加工时，根据旧的state和action，产生新的state的纯函数")])])]),t._v(" "),r("p",[r("strong",[t._v("store")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("将state、action、reducer联系在一起的对象")])]),t._v(" "),r("li",[r("p",[t._v("如何得到此对象？")]),t._v(" "),r("ol",[r("li",[r("p",[r("code",[t._v("import {createStore} from 'redux'")])])]),t._v(" "),r("li",[r("p",[r("code",[t._v("import reducer from './reducers'")])])]),t._v(" "),r("li",[r("p",[r("code",[t._v("const store = createStore(reducer)")])])])])]),t._v(" "),r("li",[r("p",[t._v("此对象的功能")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("getState():得到state")])]),t._v(" "),r("li",[r("p",[t._v("dispatch(action)：分发action，触发reducer调用，产生新的state")])]),t._v(" "),r("li",[r("p",[t._v("subscribe(listener)：注册监听，当产生新的state时，自动调用")])])])])]),t._v(" "),r("h4",{attrs:{id:"例子-选择数字进行求和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例子-选择数字进行求和"}},[t._v("#")]),t._v(" 例子：选择数字进行求和")]),t._v(" "),r("p",[r("img",{attrs:{src:n(465),alt:""}})]),t._v(" "),r("p",[r("strong",[t._v("简单版redux使用")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建"),r("code",[t._v("redux/store.js")]),t._v("文件，暴露store对象")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { createStore } from 'redux'\nimport countReducer from './count_reducer'\nexport default createStore(countReducer)//使用countReducer\n")])])])]),t._v(" "),r("li",[r("p",[t._v("创建"),r("code",[t._v("redux/count_reducer.js")]),t._v("文件，创建"),r("code",[t._v("Count")]),t._v("组件需要使用的"),r("code",[t._v("reducer")]),t._v("进行数据加工")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const initState = 0\nexport default function countReducer(preState=initState,action){\n    const {type,data} = action\n    switch (type) {\n        case 'increment':\n            return preState+data*1\n        case 'decrement':\n            return preState-data*1\n        default:\n            return preState\n    }\n}\n")])])])]),t._v(" "),r("li",[r("p",[t._v("使用"),r("code",[t._v("dispatch")]),t._v("函数通知redux进行数据加工操作")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("increatAdd=()=>{\n        const {value} = this.selectRef.current\n        store.dispatch({type:'increment',data:value})\n    }\n    decreat=()=>{\n        const {value} = this.selectRef.current\n        store.dispatch({type:'decrement',data:value})\n    }\n    increatAddIfodd=()=>{\n        const {value} = this.selectRef.current\n        const sum = store.getState()\n        if(sum%2 !== 0){\n          store.dispatch({type:'increment',data:value})\n        }\n       \n    }\n    increatAddSync=()=>{\n        const {value} = this.selectRef.current\n        setTimeout(()=>{\n          store.dispatch({type:'increment',data:value})\n        },500)\n        \n    }\n")])])])]),t._v(" "),r("li",[r("p",[t._v("使用"),r("code",[t._v("subscribe")]),t._v("监听reudx状态改变时触发页面的重新渲染")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('const root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(<App />);\n\nstore.subscribe(() => {\n  const root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(<App />);\n});\n')])])])])]),t._v(" "),r("p",[r("strong",[t._v("完整版redux****写法")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建"),r("code",[t._v("redux/store.js")]),t._v("文件，暴露store对象")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { createStore } from 'redux'\nimport countReducer from './count_reducer'\nexport default createStore(countReducer)//使用countReducer\n")])])])]),t._v(" "),r("li",[r("p",[t._v("创建"),r("code",[t._v("redux/count_reducer.js")]),t._v("文件，创建"),r("code",[t._v("Count")]),t._v("组件需要使用的"),r("code",[t._v("reducer")]),t._v("进行数据加工")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const initState = 0\nexport default function countReducer(preState=initState,action){\n    const {type,data} = action\n    switch (type) {\n        case 'increment':\n            return preState+data*1\n        case 'decrement':\n            return preState-data*1\n        default:\n            return preState\n    }\n}\n")])])])]),t._v(" "),r("li",[r("p",[t._v("创建"),r("code",[t._v("redux/count_action.js")]),t._v("文件，创建Count组件的action")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("export const incrementAction = data=>({type:'increment',data})\nexport const decrementAction = data=>({type:'decrement',data})\n\n")])])])]),t._v(" "),r("li",[r("p",[t._v("使用"),r("code",[t._v("dispatch")]),t._v("函数通知redux进行数据加工操作，通过aciton来传递action动作对象")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("increatAdd=()=>{\n        const {value} = this.selectRef.current\n        store.dispatch(incrementAction(value*1))\n    }\n    decreat=()=>{\n        const {value} = this.selectRef.current\n        store.dispatch(decrementAction(value*1))\n    }\n    increatAddIfodd=()=>{\n        const {value} = this.selectRef.current\n        const sum = store.getState()\n        if(sum%2 !== 0){\n          store.dispatch(incrementAction(value*1))\n        }\n       \n    }\n    increatAddSync=()=>{\n        const {value} = this.selectRef.current\n        setTimeout(()=>{\n          store.dispatch(incrementAction(value*1))\n        },500)\n        \n    }\n")])])])]),t._v(" "),r("li",[r("p",[t._v("使用"),r("code",[t._v("subscribe")]),t._v("监听reudx状态改变时触发页面的重新渲染")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('const root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(<App />);\n\nstore.subscribe(() => {\n  const root = ReactDOM.createRoot(document.getElementById("root"));\n  root.render(<App />);\n});\n')])])])])]),t._v(" "),r("h4",{attrs:{id:"异步action"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异步action"}},[t._v("#")]),t._v(" 异步action")]),t._v(" "),r("p",[t._v("action返回的不是一个普通的对象类型，返回的是一个函数，可称之为异步action。")]),t._v(" "),r("p",[t._v("使用方式：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("明确：延迟的动作不想在组件自身，想交给action")])]),t._v(" "),r("li",[r("p",[t._v("何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回")])]),t._v(" "),r("li",[r("p",[t._v("具体编码：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("要安装使用redux-thunk中间件，配置在store中。因为store会检查如果不是一个普通的对象，则校验不过，不会转到reducer进行加工操作。")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { createStore,applyMiddleware } from 'redux'\nimport countReducer from './count_reducer'\nimport reduxThunk from 'redux-thunk'\nexport default createStore(countReducer,applyMiddleware(reduxThunk))\n//使用applyMiddleware函数增加中间件thunk\n")])])])]),t._v(" "),r("li",[r("p",[t._v("创建action函数不再返回一个对象，而是返回一个函数，函数内部编写异步任务。")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(" export const incrementAsyncAction = (data,time)=>{\n    return (dispatch)=>{\n        setTimeout(()=>{\n            //异步任务有结果后，在使用dispatch分发一个同步action去操作数据。\n            dispatch(incrementAction(data))\n        },time)\n    }\n }\n")])])])])])])]),t._v(" "),r("h4",{attrs:{id:"react-redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" react-redux")]),t._v(" "),r("p",[r("img",{attrs:{src:n(466),alt:""}})]),t._v(" "),r("h4",{attrs:{id:"react-redux使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux使用"}},[t._v("#")]),t._v(" react-redux使用")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建容器组件，一般放于"),r("code",[t._v("containers")]),t._v("文件夹中，创建Count容器组件")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//引入UI组件\nimport CountUI from '../../components/Count'\n//引入connet用于连接UI组件和redux\nimport {connect} from 'react-redux'\n\nimport {incrementAction,decrementAction,incrementAsyncAction} from '../../redux/count_action'\n\n//容器组件从redux获取状态转化为props传递给UI组件\n//1、接收state，相当于调用此方法会调用getState()赋值给state作为参数传入\n//2、因为是传递给UI组件的props属性，需要返回key-value形式的对象\n//3、mapStateToProps用于传递状态\nfunction mapStateToProps(state){\n    return {count:state}\n}\n//容器组件把操作状态的方法转化为props传递给UI组件\n//1、接收一个dispatch函数，用于分发操作state数据加工\n//2、因为是传递给UI组件的props属性，需要返回key-value形式的对象，value为函数\n//3、mapDispatchToProps用于传递操作状态的方法\nfunction mapDispatchToProps(dispatch){\n    return {\n        jia:data=>dispatch(incrementAction(data)),\n        jian:data=>dispatch(decrementAction(data)),\n        jiaAsync:(data,time)=>{dispatch(incrementAsyncAction(data,time))}\n    }\n}\n\n//使用connet()()暴露一个Count的容器组件\nexport default connect(mapStateToProps,mapDispatchToProps)(CountUI)\n")])])])]),t._v(" "),r("li",[r("p",[t._v("使用容器组件连接store")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import React, { Component } from 'react'\nimport Count from './containers/Count'\nimport store from './redux/store'\nexport default class App extends Component {\n  render() {\n    return (\n      <Count store={store}/>\n    )\n  }\n}\n\n")])])])]),t._v(" "),r("li",[r("p",[t._v("在UI组件中使用容器组件传递过来的props")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  increatAdd=()=>{\n        const {value} = this.selectRef.current\n        this.props.jia(value*1)\n    }\n    decreat=()=>{\n        const {value} = this.selectRef.current\n        this.props.jian(value*1)\n    }\n    increatAddIfodd=()=>{\n        const {value} = this.selectRef.current\n        if(this.props.count%2!==0){\n          this.props.jia(value*1)\n        }\n    }\n    increatAddSync=()=>{\n        const {value} = this.selectRef.current\n        this.props.jiaAsync(value*1,500)\n    }\n")])])])])]),t._v(" "),r("p",[t._v("总结：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("明确概念")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("UI组件：不能使用任何redux的API，只负责页面的呈现、交互")])]),t._v(" "),r("li",[r("p",[t._v("容器组件：负责和redux通信，将结果交给UI组件")])])])]),t._v(" "),r("li",[r("p",[t._v("如何创建一个容器组件-靠react-redux的connect函数")]),t._v(" "),r("p",[r("code",[t._v("connect(mapStateToProps,mapDispatchToProps)(UI组件)")])]),t._v(" "),r("p",[r("code",[t._v("mapStateToProps")]),t._v("：映射状态，返回是一个对象")]),t._v(" "),r("p",[r("code",[t._v("mapDispatchToProps")]),t._v("：映射状态操作方法，返回值是一个对象")])]),t._v(" "),r("li",[r("p",[t._v("容器组件的store是靠props传递进去的，不是在容器组件直接引入")])])]),t._v(" "),r("h4",{attrs:{id:"react-redux优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux优化"}},[t._v("#")]),t._v(" react-redux优化")]),t._v(" "),r("p",[t._v("****"),r("strong",[t._v("优化")])]),t._v(" "),r("p",[r("code",[t._v("connect(mapStateToProps,mapDispatchToProps)(UI组件)")]),t._v("的"),r("code",[t._v("mapDispatchToProps")]),t._v("可以接收两个类型的参数，一个是对象，一个是函数，传递对象时，"),r("code",[t._v("react-redux")]),t._v("会根据你传入的"),r("code",[t._v("action")]),t._v("自动分发调用"),r("code",[t._v("dispatch")]),t._v("传递action到store，store通知reducer进行操作。")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//mapDispatchToProps简写形式\nconnect(state=>({count:state}),\n{\n  jia:incrementAction,\n  jian:decrementAction\n}\n)(CountUI)\n")])])]),r("p",[r("strong",[t._v("Provider组件的使用")])]),t._v(" "),r("p",[t._v("只要使用上react-redux，容器组件提供检测状态变化重新渲染页面，不需要在自己监听react状态的变化来重新渲染页面。")]),t._v(" "),r("p",[t._v("如果其他组件还需要使用store，则需要编写多个store：")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import React, { Component } from 'react'\nimport Count from './containers/Count'\nimport store from './redux/store'\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n         <Count store={store}/>\n         <Hello store={store}/>\n      </div>\n     \n    )\n  }\n}\n\n")])])]),r("p",[t._v("使用provider可以避免上面情况，也就是只需要只写一次store，就可以让所有需要使用store的组件都可以使用上。")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('import React from "react";\nimport ReactDOM from "react-dom/client";\nimport App from "./App";\nimport { Provider } from "react-redux";\nimport store from "./redux/store";\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n')])])]),r("p",[r("strong",[t._v("UI组件和容器组件的整合")])]),t._v(" "),r("p",[t._v("把UI组件和容器组件写到一个文件里，暴露容器组件。")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('//引入connet用于连接UI组件和redux\nimport { connect } from "react-redux";\nimport React, { Component } from "react";\n\nimport {\n  incrementAction,\n  decrementAction,\n  incrementAsyncAction,\n} from "../../redux/count_action";\n\n//定义UI组件\nclass Count extends Component {\n    selectRef = React.createRef()\n    increatAdd=()=>{\n        const {value} = this.selectRef.current\n        this.props.jia(value*1)\n    }\n    decreat=()=>{\n        const {value} = this.selectRef.current\n        this.props.jian(value*1)\n    }\n    increatAddIfodd=()=>{\n        const {value} = this.selectRef.current\n        if(this.props.count%2!==0){\n          this.props.jia(value*1)\n        }\n    }\n    increatAddSync=()=>{\n        const {value} = this.selectRef.current\n        this.props.jiaAsync(value*1,500)\n    }\n  render() {\n    return (\n      <div>\n        <h2>当前求和为：{this.props.count}</h2>\n        <select ref={this.selectRef}>\n          <option value={1}>1</option>\n          <option value={2}>2</option>\n          <option value={3}>3</option>\n        </select>&nbsp;\n        <button onClick={this.increatAdd}>+</button>&nbsp;\n        <button onClick={this.decreat}>-</button>&nbsp;\n        <button onClick={this.increatAddIfodd}>当前求和奇数加</button>&nbsp;\n        <button onClick={this.increatAddSync}>异步加</button>&nbsp;\n      </div>\n    );\n  }\n}\n\n//使用connet()()暴露一个Count的容器组件\nexport default connect((state) => ({ count: state }), {\n  jia: incrementAction,\n  jian: decrementAction,\n  jiaAsync: incrementAsyncAction,\n})(Count);\n\n')])])]),r("h4",{attrs:{id:"多个组件共享redux状态数据写法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多个组件共享redux状态数据写法"}},[t._v("#")]),t._v(" 多个组件共享redux状态数据写法")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建多个组件")])]),t._v(" "),r("li",[r("p",[t._v("为每一个组件编写reducer、action")])]),t._v(" "),r("li",[r("p",[t._v("重点：在store里使用"),r("code",[t._v("combineReducers")]),t._v("进行多个组件reducer的合并，合并后返回的总状态时一个对象！")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("const allReducer = combineReducers({\n  sum:counterReducer,\n  persons:personReducer\n})\nexport default createStore(allReducer)\n")])])])]),t._v(" "),r("li",[r("p",[t._v("交给store的是合并后的reducer")])])]),t._v(" "),r("h4",{attrs:{id:"react-redux开发者工具的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-redux开发者工具的使用"}},[t._v("#")]),t._v(" react-redux开发者工具的使用")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("安装redux-devtools-extension")])]),t._v(" "),r("li",[r("p",[t._v("store中配置 ")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import {composeWithDevTools} from 'redux-devtools-extension'\nconst store = createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))\n")])])])])]),t._v(" "),r("h4",{attrs:{id:"补充redux-toolkit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#补充redux-toolkit"}},[t._v("#")]),t._v(" 补充Redux ToolKit")]),t._v(" "),r("p",[t._v(" 使用redux ToolKit可以简化开发。可以让toolkit工具库去自动生成reducer、action。")]),t._v(" "),r("p",[t._v("使用如下：")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("安装相关依赖")]),t._v(" "),r("ol",[r("li",[t._v("npm install @reduxjs/toolkit")])])]),t._v(" "),r("li",[r("p",[t._v("编写store配置")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('import {configureStore} from "@reduxjs/toolkit"\nimport countReducer from "./slices/cont"\n\nexport default configureStore({reducer:countReducer})\n')])])])]),t._v(" "),r("li",[r("p",[t._v("编写slice相关配置")]),t._v(" "),r("div",{staticClass:"language-react&#x20;jsx extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { createSlice } from \"@reduxjs/toolkit\";\nexport const countSlice = createSlice({\n    name:'count',\n    initialState:0,\n    reducers:{\n        increment:(preState,action)=> preState+action.payload*1,\n        decrement:(preState,action)=> preState-action.payload*1\n    }\n})\n\nexport const {increment,decrement} = countSlice.actions\n\nexport const incrementAsyncAction = (data,time)=>(dispatch)=>{\n    setTimeout(()=>{\n        dispatch(increment(data*1))\n    },time)\n}\nexport default countSlice.reducer\n")])])]),r("p",[t._v("说明：")]),t._v(" "),r("p",[t._v("通过slice切片reduxToolKit 工具会自动生成reducer、action")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("name属性的value值和reducers的属性key组合成action的type。")])]),t._v(" "),r("li",[r("p",[t._v("reducers的属性key变成action的函数名")])]),t._v(" "),r("li",[r("p",[t._v("reducers属性的value变成reducer")])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);