(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{460:function(t,e,n){t.exports=n.p+"assets/img/14_Zfn-lMTvkx.b25d9f60.png"},461:function(t,e,n){t.exports=n.p+"assets/img/40_T6g5JyWphS.e3d0b032.png"},493:function(t,e,n){"use strict";n.r(e);var s=n(65),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react面向组件编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react面向组件编程"}},[t._v("#")]),t._v(" React面向组件编程")]),t._v(" "),s("h4",{attrs:{id:"什么是组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件"}},[t._v("#")]),t._v(" 什么是组件？")]),t._v(" "),s("p",[t._v("一个可复用的的页面，组件允许你将 UI 拆分为独立可复用的代码片段。")]),t._v(" "),s("h4",{attrs:{id:"组件类别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件类别"}},[t._v("#")]),t._v(" 组件类别")]),t._v(" "),s("p",[s("strong",[t._v("函数式组件：")])]),t._v(" "),s("p",[t._v("定义函数式组件：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1、定义函数式组件")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Demo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("函数式组件定义"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2、渲染组件到页面")]),t._v("\nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Demo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("React解析组件标签，找到组件，发现组件是使用函数式定义的，随后调用该函数，把返回的虚拟DOM转为真实DOM，呈现在页面中。")]),t._v(" "),s("p",[s("strong",[t._v("类式组件：")])]),t._v(" "),s("p",[t._v("定义类式组件：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1、定义类式组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//继承react.Component类，调用原型对象上的render方法。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("类式组件"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2、渲染组件到页面")]),t._v("\nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Demo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("React解析组件标签，找到组件，发现组件是使用类式定义的，随后new出该类的实例，并通过该实例调用到原型上的render方法，把返回的虚拟DOM转为真实DOM，呈现在页面中。")]),t._v(" "),s("h4",{attrs:{id:"组件三大属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件三大属性"}},[t._v("#")]),t._v(" 组件三大属性")]),t._v(" "),s("p",[s("strong",[t._v("state状态属性")])]),t._v(" "),s("p",[t._v("如何理解组件状态？")]),t._v(" "),s("p",[t._v("举个例子：一个人，他的状态则会影响这个人所做出的行为，同样，组件也类似，组件的状态影响的是页面的展示。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("state状态是组件对象最重要的属性，值是对象，可以包含多个key-value组合。")])]),t._v(" "),s("li",[s("p",[t._v("组件被称为状态机，通过更新组件的state来更新对应的页面显示（重新渲染组件）。")])])]),t._v(" "),s("p",[t._v("初始化state")]),t._v(" "),s("p",[t._v("小例子：通过点击标题来改变isHot的值，来重新渲染页面内容。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("定义组件")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1、定义类式组件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Demo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编写类的构造器，props接收外部传入参数")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("isHot")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//重新为state赋值")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("今天天气很"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isHot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'炎热'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'凉爽'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2、渲染组件到页面")]),t._v("\nReactDOM"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Demo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("给标题h2添加上点击事件，点击修改isHot的值。")]),t._v(" "),s("p",[t._v("要解决react类中this的问题？")]),t._v(" "),s("p",[t._v("由于react类中方法是放在原型对象上的，在作为事件回调时，不是通过实例对象调用的，是直接调用，类中的方法默认开启局部严格模式，方法中this是undefined。")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//1、定义类式组件\nclass Demo extends React.Component {\n    constructor(props) { //编写类的构造器，props接收外部传入参数\n       super(props);\n       this.state = { isHot: false }; //重新为state赋值\n      }\n     render() {\n        console.log(this);\n        return <h2 onClick={this.changeWeather}>今天天气很{this.state.isHot ? '炎热':'凉爽'}</h2>;\n       }\n     changeWeather(){\n       //changeWeather方法放在原型对象上\n       //由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用的\n       //类中的方法默认开启了局部严格模式，所以changeWeather中的this是undefined\n     }\n    }\n//2、渲染组件到页面\nReactDOM.render(<Demo />, document.getElementById(\"test\"));\n")])])]),s("p",[t._v("解决this指向问题")]),t._v(" "),s("p",[t._v("可以通过bind函数来重新指向this，传入的第一个参数为this的指向，返回一个新的函数。")]),t._v(" "),s("p",[s("code",[t._v("this.a = this.changeWeather.bind(this)")])]),t._v(" "),s("p",[t._v("在构造器中通过原型对象上的"),s("code",[t._v("changeWeather")]),t._v("方法调用bind方法，传入this，返回一个新的函数赋值给属性a")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//1、定义类式组件\nclass Demo extends React.Component {\n    constructor(props) { //编写类的构造器，props接收外部传入参数\n       super(props);\n       this.state = { isHot: false }; //重新为state赋值\n       //解决this指向问题\n       this.a = this.changeWeather.bind(this)\n      }\n     render() {\n        console.log(this);\n        return <h2 onClick={this.a}>今天天气很{this.state.isHot ? '炎热':'凉爽'}</h2>;\n       }\n     changeWeather(){\n       \n       //changeWeather方法放在原型对象上\n       //由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用的\n       //类中的方法默认开启了局部严格模式，所以changeWeather中的this是undefined\n     }\n    }\n//2、渲染组件到页面\nReactDOM.render(<Demo />, document.getElementById(\"test\"));\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用setState方法改变state的值，才能引起页面页面重新渲染")]),t._v(" "),s("p",[t._v("状态必须通过setState方法来更改弥补你呢个直接更改。")]),t._v(" "),s("p",[t._v("这种写法是错误的，不被react所接受")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("this.state.isHot=!this.state.isHot\n\n")])])]),s("p",[t._v("正确写法：")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("this.setState({isHot:!this.state.isHot})\n")])])])]),t._v(" "),s("li",[s("p",[t._v("重新简写代码")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("把state属性从构造函数抽出来，写到类里面，代表实例对象上的属性，每一个new出来的实例对象都有该属性。")])]),t._v(" "),s("li",[s("p",[t._v("解决事件回调函数中this问题，使用箭头函数，因为箭头函数this会往外查找，会找到实例对象本身。")])])]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        state = { isHot: false };\n        render() {\n          return (\n            <h2 onClick={this.clickTitle}>\n              今天天气很{this.state.isHot ? "炎热" : "凉爽"}\n            </h2>\n          );\n        }\n        clickTitle=()=> {\n          this.setState({isHot:!this.state.isHot})\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Demo />, document.getElementById("test"));\n')])])])])]),t._v(" "),s("h4",{attrs:{id:"props属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props属性"}},[t._v("#")]),t._v(" props属性")]),t._v(" "),s("p",[t._v("props属性用来接收外部传入的属性，可以在组件内使用。")]),t._v(" "),s("p",[t._v("props属性的基本使用：")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const {name, age, sex} = this.props\n          return (\n           <ul>\n              <li>姓名：{name}</li>\n              <li>年龄：{age}</li>\n              <li>性别：{sex}</li>\n            </ul>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      // 在组件外部使用key=value形式向组件内部传递数据\n      ReactDOM.render(<Demo name="test" age="18" sex="男"/>, document.getElementById("test"));\n')])])]),s("p",[t._v("批量传递属性：可使用...扩展运算符")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const {name, age, sex} = this.props\n          return (\n           <ul>\n              <li>姓名：{name}</li>\n              <li>年龄：{age}</li>\n              <li>性别：{sex}</li>\n            </ul>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      const p = {name:"test", age:"18", sex:"男"}\n      ReactDOM.render(<Demo {...p}/>, document.getElementById("test"));\n')])])]),s("p",[t._v("props属性限制：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("引入propstypejs文件")])]),t._v(" "),s("li",[s("p",[t._v("在类里面定义"),s("code",[t._v("propTypes")]),t._v("属性")]),t._v(" "),s("p",[t._v("propTypes定义类型限制：接受PropTypes类")]),t._v(" "),s("p",[t._v("defaultProps定义属性默认值")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const {name, age, sex} = this.props\n          return (\n           <ul>\n              <li>姓名：{name}</li>\n              <li>年龄：{age}</li>\n              <li>性别：{sex}</li>\n            </ul>\n          );\n        }\n        //接受属性类型限制\n        static propTypes={name:PropTypes.string.isRequired}\n        //属性默认值\n        static defaultProps={sex:\'男\'}\n      }\n      //2、渲染组件到页面\n      const p = {name:"test", age:"18", sex:"男"}\n      ReactDOM.render(<Demo {...p}/>, document.getElementById("test"));\n')])])])])]),t._v(" "),s("h4",{attrs:{id:"refs属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#refs属性"}},[t._v("#")]),t._v(" refs属性")]),t._v(" "),s("p",[t._v("理解：组件内的标签定义ref来标识自己，取得真实DOM元素。")]),t._v(" "),s("p",[t._v("ref的简单使用：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("字符串形式的ref：（官方废弃，不推荐使用）")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('     //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const { name, age, sex } = this.props;\n          return (\n            <div>\n              <input ref="input1" type="text" />\n              <button onClick={this.clickBtn}>点击按钮</button>\n            </div>\n          );\n        }\n        clickBtn=()=>{\n          alert(this.refs.input1.value)\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Demo  />, document.getElementById("test"));\n')])])])]),t._v(" "),s("li",[s("p",[t._v("回调形式的ref：")]),t._v(" "),s("p",[s("code",[t._v("ref={(currentNode)=>{this.input1 = currentNode}};")]),t._v("回调函数接收一个参数，参数为当前节点")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const { name, age, sex } = this.props;\n          return (\n            <div>\n              <input ref={currentNode=>this.input1=currentNode} type="text" />\n              <button onClick={this.clickBtn}>点击按钮</button>\n            </div>\n          );\n        }\n        clickBtn=()=>{\n          alert(this.input1.value)\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Demo  />, document.getElementById("test"));\n')])])]),s("p",[t._v("注意点：")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("ref")]),t._v(" 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 "),s("code",[t._v("null")]),t._v("，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。")]),t._v(" "),s("p",[t._v("ref 的回调函数定义成 class 的绑定函数：")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('     //1、定义类式组件\n      class Demo extends React.Component {\n        render() {\n          const { name, age, sex } = this.props;\n          return (\n            <div>\n              <input ref={this.bindInput} type="text" />\n              <button onClick={this.clickBtn}>点击按钮</button>\n            </div>\n          );\n        }\n        clickBtn=()=>{\n          alert(this.input1.value)\n        }\n        bindInput=currentNode=>this.input1=currentNode\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Demo  />, document.getElementById("test"));\n')])])])]),t._v(" "),s("li",[s("p",[t._v("通过"),s("code",[t._v("React.createRef()")]),t._v("函数创建，该函数返回一个容器，该容器可以存储被ref所标识的节点，只能存储一个。（当前推荐写法）")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Demo extends React.Component {\n        myRef = React.createRef();\n        render() {\n          return (\n            <div>\n              <input ref={this.myRef} type="text" />\n              <button onClick={this.clickBtn}>点击按钮</button>\n            </div>\n          );\n        }\n        clickBtn = () => {\n          alert(this.myRef.current.value);\n        };\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Demo />, document.getElementById("test"));\n')])])])])]),t._v(" "),s("h4",{attrs:{id:"非受控组件和受控组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非受控组件和受控组件"}},[t._v("#")]),t._v(" 非受控组件和受控组件")]),t._v(" "),s("p",[t._v("非受控组件：(不推荐使用)")]),t._v(" "),s("p",[t._v("获取DOM元素的值时，过度会使用多ref来获取元素value。")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Login extends React.Component {\n        usernameRef = React.createRef();\n        passwordRef = React.createRef();\n        submit = (event) => {\n          event.preventDefault();\n          alert(`用户名：${this.usernameRef.current.value}，密码：${this.passwordRef.current.value}`)\n        };\n        render() {\n          return (\n            <form onSubmit={this.submit}>\n              用户名：\n              <input type="text" name="username" ref={this.usernameRef} />\n              密码：\n              <input type="password" name="password" ref={this.passwordRef} />\n              <button>登陆</button>\n            </form>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Login />, document.getElementById("test"));\n')])])]),s("p",[t._v("受控组件：")]),t._v(" "),s("p",[t._v("类似VUE中的双向绑定数据，使用onChange事件来获取DOM元素value，减少ref的使用,使用状态state属性来存储数据。")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('      //1、定义类式组件\n      class Login extends React.Component {\n        state = {\n          username: "",\n          password: "",\n        };\n        usernameChange = (event) => {\n          this.setState({ username: event.target.value });\n        };\n        passwordChange = (event) => {\n          this.setState({ password: event.target.value });\n        };\n        submit = (event) => {\n          event.preventDefault();\n          alert(\n            `用户名：${this.state.username}，密码：${this.state.password}`\n          );\n        };\n        render() {\n          return (\n            <form onSubmit={this.submit}>\n              用户名：\n              <input type="text" name="username" onChange={this.usernameChange} />\n              密码：\n              <input\n                type="password"\n                name="password"\n                onChange={this.passwordChange}\n              />\n              <button>登陆</button>\n            </form>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Login />, document.getElementById("test"));\n')])])]),s("p",[t._v("优化写法：")]),t._v(" "),s("p",[t._v("把onChange事件中调用同一个方法，传递不同的参数来控制。")]),t._v(" "),s("p",[t._v("注意点：事件回调函数中一定是要给它返回一个函数，不是函数则不能执行相应回调。")]),t._v(" "),s("p",[t._v("第一种：")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('     //1、定义类式组件\n      class Login extends React.Component {\n        state = {\n          username: "",\n          password: "",\n        };\n        saveFormData=(dataType)=>{\n          return (event)=>{\n            this.setState({[dataType]:event.target.value})\n          }\n        }\n        submit = (event) => {\n          event.preventDefault();\n          alert(\n            `用户名：${this.state.username}，密码：${this.state.password}`\n          );\n        };\n        render() {\n          return (\n            <form onSubmit={this.submit}>\n              用户名：\n              <input type="text" name="username" onChange={this.saveFormData(\'username\')} />\n              密码：\n              <input\n                type="password"\n                name="password"\n                onChange={this.saveFormData(\'password\')}\n              />\n              <button>登陆</button>\n            </form>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Login />, document.getElementById("test"));\n')])])]),s("p",[t._v("第二种：")]),t._v(" "),s("div",{staticClass:"language-react&#x20;jsx extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('    //1、定义类式组件\n      class Login extends React.Component {\n        state = {\n          username: "",\n          password: "",\n        };\n        saveFormData=(dataType,event)=>{\n            this.setState({[dataType]:event.target.value})\n        }\n        submit = (event) => {\n          event.preventDefault();\n          alert(\n            `用户名：${this.state.username}，密码：${this.state.password}`\n          );\n        };\n        render() {\n          return (\n            <form onSubmit={this.submit}>\n              用户名：\n              <input type="text" name="username" onChange={event=>this.saveFormData(\'username\',event)} />\n              密码：\n              <input\n                type="password"\n                name="password"\n                onChange={event=>this.saveFormData(\'password\',event)}\n              />\n              <button>登陆</button>\n            </form>\n          );\n        }\n      }\n      //2、渲染组件到页面\n      ReactDOM.render(<Login />, document.getElementById("test"));\n')])])]),s("h4",{attrs:{id:"组件的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件的生命周期"}},[t._v("#")]),t._v(" 组件的生命周期")]),t._v(" "),s("p",[t._v("组件初始化挂载到节点上，取消挂载的过程称之为组件的生命周期。")]),t._v(" "),s("p",[s("strong",[t._v("旧版本生命周期：")])]),t._v(" "),s("p",[s("img",{attrs:{src:n(460),alt:""}})]),t._v(" "),s("p",[t._v("生命周期主要分为三个阶段：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化阶段：由"),s("code",[t._v("ReactDOM.render()")]),t._v("触发—>初次渲染")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("constructor")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentWillMount")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("render")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentDidMount")])])])])]),t._v(" "),s("li",[s("p",[t._v("更新阶段：由"),s("code",[t._v("setState()")]),t._v("或者父组件重新"),s("code",[t._v("render")]),t._v("触发：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("shouldComponentUpdate")]),t._v(" 该函数返回"),s("code",[t._v("false")]),t._v("，则不会进行下面的钩子函数，不会重新渲染页面。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentWillUpdate")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("render")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentDidUpdate")])])])])]),t._v(" "),s("li",[s("p",[t._v("卸载组件：由"),s("code",[t._v("ReactDOM.unmountComponentAtNode()")]),t._v("函数触发")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("compomentWillUnmount")])])])])]),t._v(" "),s("p",[t._v("生命周期函数：")]),t._v(" "),s("p",[s("code",[t._v("componetDidMount()")]),t._v("组件实例化完成，组件挂载到页面后调用的生命周期钩子函数。")]),t._v(" "),s("p",[s("code",[t._v("ReactDOM.unmountComponentAtNode(node)")]),t._v("卸载组件，取消组件的挂载。")]),t._v(" "),s("p",[s("code",[t._v("componentWillUnmount()")]),t._v("组件卸载之前调用的钩子函数。")]),t._v(" "),s("p",[s("strong",[t._v("新版本生命周期")]),t._v("：")]),t._v(" "),s("p",[s("img",{attrs:{src:n(461),alt:""}})]),t._v(" "),s("p",[t._v("生命周期主要分为三个阶段：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("初始化阶段：由"),s("code",[t._v("ReactDOM.render()")]),t._v("触发—>初次渲染")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("constructor")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("getDerivedStateFromProps")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("render")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentDidMount")])])])])]),t._v(" "),s("li",[s("p",[t._v("更新阶段：由"),s("code",[t._v("setState()")]),t._v("或者父组件重新"),s("code",[t._v("render")]),t._v("触发：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("getDerivedStateFromProps")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("shouldComponentUpdate")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("render")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("getSnapshotBeforeUpdate")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("componentDidUpdate")])])])])]),t._v(" "),s("li",[s("p",[t._v("卸载组件：由"),s("code",[t._v("ReactDOM.unmountComponentAtNode()")]),t._v("函数触发")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("compomentWillUnmount")])])])])]),t._v(" "),s("p",[s("code",[t._v("getDerivedStateFromProps")]),t._v(" 钩子需要返回一个state对象或者null，使用场景state的值取决于props属性时，可以使用此钩子函数。")]),t._v(" "),s("p",[s("code",[t._v("getSnapshotBeforeUpdate")]),t._v("钩子需要返回一个null或者一个value值，这个值会传递到"),s("code",[t._v("componentDidUpdate")]),t._v("中来使用。")]),t._v(" "),s("p",[s("strong",[t._v("新旧对比：")])]),t._v(" "),s("p",[t._v("少了3个生命周期钩子，多了2个生命周期钩子。")]),t._v(" "),s("h4",{attrs:{id:"dom的diffing算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom的diffing算法"}},[t._v("#")]),t._v(" DOM的Diffing算法")])])}),[],!1,null,null,null);e.default=a.exports}}]);