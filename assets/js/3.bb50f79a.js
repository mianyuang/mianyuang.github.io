(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{420:function(t,a,s){t.exports=s.p+"assets/img/49_3zwmNeuk2b.aa216dc2.png"},421:function(t,a,s){t.exports=s.p+"assets/img/44_2cAiRrskP1.86e21716.png"},422:function(t,a,s){t.exports=s.p+"assets/img/45_i03NMegpUu.aa15f3fe.png"},423:function(t,a,s){t.exports=s.p+"assets/img/oSyKz0hoz3.e0a8757a.png"},424:function(t,a,s){t.exports=s.p+"assets/img/YkZhUN7h9p.1ec7c15d.png"},425:function(t,a,s){t.exports=s.p+"assets/img/27_6xMl-cG_zg.5f924340.png"},426:function(t,a,s){t.exports=s.p+"assets/img/14_eWHX0MetoU.be02377c.png"},427:function(t,a,s){t.exports=s.p+"assets/img/32_ndd9qiGx_w.b32f352d.png"},428:function(t,a,s){t.exports=s.p+"assets/img/44_xqlSaRStCr.fa6bc370.png"},429:function(t,a,s){t.exports=s.p+"assets/img/57_qhHQyJhwDc.775b13e0.png"},430:function(t,a,s){t.exports=s.p+"assets/img/24_vt9sSmevIM.3816a534.png"},431:function(t,a,s){t.exports=s.p+"assets/img/35_CUG2npNE8Q.a99a79f7.png"},432:function(t,a,s){t.exports=s.p+"assets/img/42_ouKbkRWwzt.b035e494.png"},433:function(t,a,s){t.exports=s.p+"assets/img/51_sh_SI1cVrF.9d91b2c2.png"},434:function(t,a,s){t.exports=s.p+"assets/img/12_oK-XhAmWlr.d845b87b.png"},435:function(t,a,s){t.exports=s.p+"assets/img/53_EY1dYu0bS1.aa07279d.png"},436:function(t,a,s){t.exports=s.p+"assets/img/13_DMRSS5rvFb.f3aefbc2.png"},437:function(t,a,s){t.exports=s.p+"assets/img/05_F974Ce7Uci.70c9dc18.png"},438:function(t,a,s){t.exports=s.p+"assets/img/54_o9hZvIEEiD.685aebee.png"},439:function(t,a,s){t.exports=s.p+"assets/img/42_VYXGoiiMgh.4d352e90.png"},440:function(t,a,s){t.exports=s.p+"assets/img/47_P2exGVry66.fcaae624.png"},441:function(t,a,s){t.exports=s.p+"assets/img/13_hxfDlCg6jM.4654ec86.png"},442:function(t,a,s){t.exports=s.p+"assets/img/CWDxUyQkxj.01a7a188.png"},488:function(t,a,s){"use strict";s.r(a);var v=s(65),n=Object(v.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"java"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[t._v("#")]),t._v(" java")]),t._v(" "),v("p",[v("strong",[t._v("基本数据类型转换")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("自动提升类型：当容量小的变量和大容量变量数据类型做运算时，结果会自动提升为大容量数据类型。")]),t._v(" "),v("p",[t._v("根据 byte→char→short→int→long→float→double→string")])]),t._v(" "),v("li",[v("p",[t._v("强制类型转换")]),t._v(" "),v("p",[t._v("自动提升类型的逆向操作，需要在前面添加(强制转换的类型)")])])]),t._v(" "),v("p",[v("strong",[t._v("数组")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("选择排序")]),t._v(" "),v("ul",[v("li",[t._v("直接选择排序、堆排序")])])]),t._v(" "),v("li",[v("p",[t._v("交换排序")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("冒泡排序、快速排序")])]),t._v(" "),v("li",[v("p",[t._v("冒泡排序")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("排序思想：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("比较每每相邻的两个元素，如果第一个比第二个大，则交换他们的位置，这样第一遍后最大的那个数会是最后一个。")])]),t._v(" "),v("li",[v("p",[t._v("针对每一个元素都重复以上的步骤，最后一个不用。")])])])])])])])]),t._v(" "),v("li",[v("p",[t._v("插入排序")]),t._v(" "),v("ul",[v("li",[t._v("直接插入排序、折半插入排序、Shell排序")])])]),t._v(" "),v("li",[v("p",[t._v("归并排序")])]),t._v(" "),v("li",[v("p",[t._v("桶式排序")])]),t._v(" "),v("li",[v("p",[t._v("基数排序")])])]),t._v(" "),v("p",[v("strong",[t._v("面向对象：封装")])]),t._v(" "),v("p",[v("img",{attrs:{src:s(420),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("代码块")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("代码块的作用：用来初始化类、对象")])]),t._v(" "),v("li",[v("p",[t._v("代码块有修饰的话，只能是static")])]),t._v(" "),v("li",[v("p",[t._v("分类：分为静态代码块和非静态代码块")])]),t._v(" "),v("li",[v("p",[t._v("静态代码块和非静态代码块的区别")]),t._v(" "),v("p",[t._v("静态代码块：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("定义：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("代码\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("随着类的加载而执行，且只执行一次")])]),t._v(" "),v("li",[v("p",[t._v("作用：初始化当前类的静态属性")])]),t._v(" "),v("li",[v("p",[t._v("如果定义类多个静态代码块，则按照定义顺序执行。")])]),t._v(" "),v("li",[v("p",[t._v("静态代码块只能调用静态的属性，静态的方法，不能调用非静态的结构")])])]),t._v(" "),v("p",[t._v("非静态代码块：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("定义：")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("代码\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("随着创建对象而执行，就执行一次非静态代码块")])]),t._v(" "),v("li",[v("p",[t._v("作用：可以在创建对象时，对对象属性进行初始化。")])]),t._v(" "),v("li",[v("p",[t._v("多个非静态代码块，按照定义顺序执行。")])]),t._v(" "),v("li",[v("p",[t._v("非静态代码块可以调用静态的属性，静态的方法和非静态的属性和方法。")])])])])]),t._v(" "),v("p",[v("strong",[t._v("静态代码块、非静态代码块、和构造函数执行顺序")])]),t._v(" "),v("p",[t._v("如果是有继承的父类，则在子类new一个对象时，如果调用到父类的构造函数，则先执行父类的静态代码块，再执行子类静态代码块、")]),t._v(" "),v("p",[t._v("再执行父类非静态代码块和父类构造函数，最后在执行子类非静态代码块和子类构造方法。")]),t._v(" "),v("p",[t._v("执行顺序：静态代码块→非静态代码块→构造函数")]),t._v(" "),v("p",[v("strong",[t._v("抽象abstract")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("修饰类：抽象类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("此类不能实例化")])]),t._v(" "),v("li",[v("p",[t._v("抽象类中一定有构造器，便于子类实例化时调用。")])]),t._v(" "),v("li",[v("p",[t._v("开发中，都会提供抽象类的子类，让子类对象实例化，完成相关操作。")])])])]),t._v(" "),v("li",[v("p",[t._v("修饰方法：抽象方法")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("抽象方法只方法的声明，没有方法体")])]),t._v(" "),v("li",[v("p",[t._v("包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法")])]),t._v(" "),v("li",[v("p",[t._v("若子类重写了父类中的所有抽象方法，此子类可以实例化")])]),t._v(" "),v("li",[v("p",[t._v("若子类没有重写父类的所有抽象方法，子类也是一个抽象类。需要abstract来修饰")])])])])]),t._v(" "),v("p",[v("strong",[t._v("接口interface")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("接口使用interface定义")])]),t._v(" "),v("li",[v("p",[t._v("如何定义接口")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("在JDK7以前，只能定义抽象方法和全局常量")])]),t._v(" "),v("li",[v("p",[t._v("在JDK8以后，增加了静态方法和默认方法")])])])]),t._v(" "),v("li",[v("p",[t._v("接口不能定义构造器，不能实例化")])])]),t._v(" "),v("p",[v("strong",[t._v("多线程")])]),t._v(" "),v("p",[t._v("多线程的创建")]),t._v(" "),v("p",[v("strong",[t._v("方式一：")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("创建一个继承于Thred类的子类")])]),t._v(" "),v("li",[v("p",[t._v("重写Thread类的run方法")])]),t._v(" "),v("li",[v("p",[t._v("创建Thread类子类的实例对象")])]),t._v(" "),v("li",[v("p",[t._v("通过此对象调用start方法执行")])]),t._v(" "),v("li",[v("p",[t._v("一些线程常用方法")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("start 启动线程，并执行对象的run方法")])]),t._v(" "),v("li",[v("p",[t._v("run 线程在被调用时执行的操作")])]),t._v(" "),v("li",[v("p",[t._v("getName 获取线程名称")])]),t._v(" "),v("li",[v("p",[t._v("setName 设置线程名称")])]),t._v(" "),v("li",[v("p",[t._v("currentThread 返回当前线程")])]),t._v(" "),v("li",[v("p",[t._v("yield 释放当前cpu执行权")])]),t._v(" "),v("li",[v("p",[t._v("join 在线程a中调用线程b的join方法，线程a进入阻塞状态，直到线程b执行完，a才结束阻塞状态。")])]),t._v(" "),v("li",[v("p",[t._v("stop 强制结束线程，不再执行。已过时")])]),t._v(" "),v("li",[v("p",[t._v("sleep(long milltime)  让当前线程 睡眠，在指定的时间内，线程时阻塞状态。")])]),t._v(" "),v("li",[v("p",[t._v("isAlive 判断当前线程是否存活")])]),t._v(" "),v("li",[v("p",[t._v("setPriority 设置线程优先级")])])])])]),t._v(" "),v("p",[v("strong",[t._v("方式二： 实现runnable接口")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("创建一个实现类runnable接口的类")])]),t._v(" "),v("li",[v("p",[t._v("实现类去实现runnable中的抽象方法run")])]),t._v(" "),v("li",[v("p",[t._v("创建实现类的对象")])]),t._v(" "),v("li",[v("p",[t._v("将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象")])]),t._v(" "),v("li",[v("p",[t._v("通过thread类的对象调用start方法")])])]),t._v(" "),v("p",[v("strong",[t._v("比较两种方式")])]),t._v(" "),v("p",[t._v("优先选择方式二，实现的方式更适合来处理多个线程有数据共享的情况。")]),t._v(" "),v("p",[v("strong",[t._v("方式三：实现Callable接口")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("实现call方法，相比run方法实现，可以有返回值")])]),t._v(" "),v("li",[v("p",[t._v("方法可以抛出异常")])]),t._v(" "),v("li",[v("p",[t._v("支持范型的返回值")])]),t._v(" "),v("li",[v("p",[t._v("需要借助FutureTask类，比如获取返回结果")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Future接口")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("可以对具体Runnable、Cellable任务的执行结果进行取消、查询是否完成、获取结果等。")])]),t._v(" "),v("li",[v("p",[t._v("FutureTask是Future接口的唯一实现类")])]),t._v(" "),v("li",[v("p",[t._v("FutureTask同时实现类Runnable、Future接口。它即可以作为Runnable被线程执行，又可以作为Future得到Callable的值。")])])])])]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1创建一个实现Callabel实现类")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumThread")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2、实现call方法")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//多线程代码")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3、创建一个Callabel实现类对象")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumThread")]),t._v(" num "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NumThread")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4、创建一个FutureTask实现类对象,把Callabel实现类对象作为参数")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),t._v(" futureTask "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//5、创建Thread类对象，执行start方法")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" thread "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("futureTask"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行start方法")]),t._v("\nthread"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),v("p",[v("strong",[t._v("方式四：使用线程池创建")])]),t._v(" "),v("p",[v("img",{attrs:{src:s(421),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("线程的生命周期")])]),t._v(" "),v("p",[t._v("线程的状态：Thread.State类表示线程状态")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("新建：")]),t._v(" "),v("p",[t._v("当一个Thread类或子类对象被声明创建时，新生的线程对象处于新建状态。")])]),t._v(" "),v("li",[v("p",[t._v("就绪：")]),t._v(" "),v("p",[t._v("新建的线程处于被start后，将进入线程队列等待CPU时间片，此时它已具备类运行的条件，只是没有分配到CPU")])]),t._v(" "),v("li",[v("p",[t._v("运行：")]),t._v(" "),v("p",[t._v("当就绪的线程被调度并获得CPU资源时，便进行运行状态，run方法定义类运行的操作")])]),t._v(" "),v("li",[v("p",[t._v("阻塞：")]),t._v(" "),v("p",[t._v("在某些特殊情况下，被人刮起或者执行输入输出操作时，让出cpu并临时中止自己的执行，进入阻塞状态")])]),t._v(" "),v("li",[v("p",[t._v("死亡：")]),t._v(" "),v("p",[t._v("线程完成类它的全部工作或者线程被提前强制性得中止或者出现异常导致结束。")])])]),t._v(" "),v("p",[v("img",{attrs:{src:s(422),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("线程安全问题")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("问题：在卖票过程中，出现了重票、错票—>就是出现了线程安全问题")])]),t._v(" "),v("li",[v("p",[t._v("出现原因：当某个线程在操作过程中，尚未操作完成，其他线程参与进来，执行操作。")])]),t._v(" "),v("li",[v("p",[t._v("如何解决：当一个线程进入操作时，其他线程应该等待，即使正在操作的线程阻塞了，也要等待。等到正在执行的线程执行完了，其他线程才能进入执行。")])]),t._v(" "),v("li",[v("p",[t._v("在java中，通过同步机制，来解决线程安全问题")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("方式一：同步代码块")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronozed")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("同步监视器"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//需要被同步的代码")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//说明：操作共享数据的代码，即为需要被同步的代码")]),t._v("\n   共享数据：多个线程共同操作的数据\n   同步监视器：俗称：锁。任何一个类的对象，都可以当作锁\n     要求：多个线程必须要共用一把锁。\n   \n")])])])]),t._v(" "),v("li",[v("p",[t._v("方式二：同步方法")]),t._v(" "),v("p",[t._v("如果操作的共享数据代码完整的声明在一个方法中，我们不妨将此方法声明同步。")]),t._v(" "),v("p",[t._v("在方法加上synchronozed即可。")]),t._v(" "),v("p",[t._v("同步方法依然涉及到监视器，只是不需要我们显示声明")]),t._v(" "),v("p",[t._v("非静态的同步方法，同步监视器是this")]),t._v(" "),v("p",[t._v("静态的同步方法，同步监视器是：当前类本身")])]),t._v(" "),v("li",[v("p",[t._v("方式三Lock锁")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("实例化一个ReentrantLock锁类")])]),t._v(" "),v("li",[v("p",[t._v("把要同步的代码之前使用lock类的lock方法")])]),t._v(" "),v("li",[v("p",[t._v("执行完同步代码后在调用lock类的释放锁的方法unlock")])])]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Window")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ticket "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//共享资源")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实例化锁")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" lock "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lock"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步代码")]),t._v("\n    lock"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])])])]),t._v(" "),v("p",[v("strong",[t._v("线程的通信")])]),t._v(" "),v("p",[t._v("多个线程之间怎么运行问题，如何进行。")]),t._v(" "),v("p",[t._v("涉及到三个方法")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("wait 方法 一旦执行此方法，当前线程就会进入阻塞状态，并释放同步机制")])]),t._v(" "),v("li",[v("p",[t._v("notify方法 一旦执行此方法，就会唤醒在等待的线程，如果有多个线程被wait，就优先唤醒优先级较高的那个")])]),t._v(" "),v("li",[v("p",[t._v("notifyAll 方法 唤醒所有在等待的线程")])]),t._v(" "),v("li",[v("p",[t._v("说明：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("三个方法必须写在同步代码里")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("这三个方法调用者必须是同步代码块或者同步方法中的同步监视器")])])])])])]),t._v(" "),v("p",[v("strong",[t._v("sleep和wait有何不同")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("相同点")]),t._v(" "),v("p",[t._v("都能使线程进入阻塞状态")])]),t._v(" "),v("li",[v("p",[t._v("不同点")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("两个方法声明的位置不同，sleep是thread类中声明，wait方法是在Object中声明")])]),t._v(" "),v("li",[v("p",[t._v("调用的要求不同：sleep在任何需要调用的地方都可调用，wait方法必须使用在同步代码块中或者同步方法中")])]),t._v(" "),v("li",[v("p",[t._v("关于是否释放同步监视器：如果两个方法都使用在同步代码块和同步方法中，sleep方法不释放锁，wait方法会释放锁")])])])])]),t._v(" "),v("p",[v("strong",[t._v("比较器")])]),t._v(" "),v("p",[t._v("Comparable接口使用")]),t._v(" "),v("p",[t._v("实现这个接口，重写compareTo方法，实现自定义类型的比较，可以进行从小到大排序。")]),t._v(" "),v("p",[t._v("重写compareTo方法规则：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("如果当前对象this大于形参对象obj，则返回正数")])]),t._v(" "),v("li",[v("p",[t._v("如果当前对象this等于形参对象obj，则返回零")])]),t._v(" "),v("li",[v("p",[t._v("如果当前对象this小于形参对象obj，则返回负整数")])])]),t._v(" "),v("p",[t._v("对于自定义类来说，需要排序的话，就可以实现自定力类的CompareTo接口，重写compareTo方法，在compareto方法中指明如何排序")]),t._v(" "),v("p",[v("strong",[t._v("注解")])]),t._v(" "),v("p",[t._v("如何自定义注解，随便拿一个现成注解来仿照写就行。")]),t._v(" "),v("p",[t._v("元注解：JDK提供四种元注解")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Retention ")]),t._v(" "),v("p",[t._v("只能修饰一个注解定义的注解，用于指定该注解的生命周期，@Retention包含一个RetentionPolicy类型的成员变量，使用该注解时必须为该value成员变量指定值：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("RetentionPolicy.SOURCE:在源文件中有效（即源文件保留），通过javac编译时就丢弃，不保留。")])]),t._v(" "),v("li",[v("p",[t._v("CLASS：在class文件中有效即class保留，运行时丢弃，不保留，不会加载到内存中")])]),t._v(" "),v("li",[v("p",[t._v("RUNTIME：在运行时保留即运行时保留，保留在class中，在运行时加载到内存，就可以通过反射进行获取")])])])])]),t._v(" "),v("p",[v("img",{attrs:{src:s(423),alt:""}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Target")]),t._v(" "),v("p",[t._v("用于修饰注解的定义，指定被修饰的注解只能用于哪些程序元素。@Target包含一个value成员变量。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(424),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("Document")]),t._v(" "),v("p",[t._v("表示所修饰的注解在被javac解析时，保留下来。")])]),t._v(" "),v("li",[v("p",[t._v("Inherited")])])]),t._v(" "),v("p",[v("strong",[t._v("集合框架")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("collection接口")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("List接口 有序的，可重复的数据")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("ArrayList")]),t._v(" "),v("p",[t._v("线程不安全的，效率高，底层使用object数组存储")]),t._v(" "),v("p",[v("strong",[t._v("源码分析JDK7")])]),t._v(" "),v("p",[t._v("new ArrayList()底层创建了长度是10的object[]的数组elementData，往里添加元素导致容量不够时，则扩容。默认情况下，扩容为原来的1.5倍，同时需要将原数组数据复制到新数组中。")]),t._v(" "),v("p",[t._v("开发中建议使用new ArrayList(int count)来确定容量，避免扩容带来的性能消耗。")]),t._v(" "),v("p",[v("strong",[t._v("JDK8中的变化")])]),t._v(" "),v("p",[t._v("在new ArrayList时底层Object数组初始化为{}，并没有创建长度为10的数组，在add添加元素时，底层才创建长度为10的数组")]),t._v(" "),v("p",[t._v("后续的擦操作就一样")])]),t._v(" "),v("li",[v("p",[t._v("LinkList")]),t._v(" "),v("p",[t._v("底层使用双向链表存储，对于频繁插入和删除操作效率高，查询慢。")])]),t._v(" "),v("li",[v("p",[t._v("Vector")]),t._v(" "),v("p",[t._v("线程安全，效率低，底层使用object数组存储")]),t._v(" "),v("p",[v("strong",[t._v("源码分析JDK7")]),t._v("和JDK8")]),t._v(" "),v("p",[t._v("底层创建了长度是10的object[]的数组elementData，往里添加元素导致容量不够时，则扩容。默认情况下，扩容为原来的2倍，同时需要将原数组数据复制到新数组中。")])]),t._v(" "),v("li",[v("p",[t._v("Set接口 无序的，不可重复的数据")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("HashSet")]),t._v(" "),v("p",[t._v("线程不安全的，可以存储null值。")]),t._v(" "),v("p",[v("strong",[t._v("分析")])]),t._v(" "),v("p",[t._v("向hashSet添加元素时，首先调用元素a所在类的hashCode方法，计算元素a的哈希值，此哈希值通过某种算法计算出在hashSet底层数组中存放位置，判断此位置上是否以有元素：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("如果没有元素，则元素a添加成功。")])]),t._v(" "),v("li",[v("p",[t._v("如果有其他元素b或者以链条的形式存在多个元素，则比较a元素与b元素的hash值")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("如果hash值不同，则元素添加成功")])]),t._v(" "),v("li",[v("p",[t._v("如果hash值相同，则需要在调用a元素的equals方法返回true，添加失败。")])])])])])]),t._v(" "),v("li",[v("p",[t._v("LinkHashSet")]),t._v(" "),v("p",[t._v("作为hashSet的子类，遍历内部数据时，可以按照添加顺序遍历。")])]),t._v(" "),v("li",[v("p",[t._v("TreeSet")]),t._v(" "),v("p",[t._v("可以按照添加的对象指定属性进行排序。")]),t._v(" "),v("p",[t._v("向Treeset中添加数据，要求是相同类的对象。 ")]),t._v(" "),v("p",[t._v("自然排序中，比较两个对象是否相同的标准为compareTo返回0，不再是equals方法。")])])])])])])])]),t._v(" "),v("li",[v("p",[t._v("Map接口")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("HashMap")]),t._v(" "),v("p",[t._v("线程不安全，效率高。可以存储null的key和value。")]),t._v(" "),v("p",[v("strong",[t._v("JDK分析JDK7")])]),t._v(" "),v("p",[t._v("hashMap map = new hashMap")]),t._v(" "),v("p",[t._v("实例化后，创建了长度是16的Entry[] 数组。")]),t._v(" "),v("p",[t._v("map.put(key,value)")]),t._v(" "),v("p",[t._v("先利用key所在类的hashcode计算key的哈希值，此哈希值经过某种算法计算后，得到在Entry数组中的位置。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("如果此位置上没有数据，则添加成功。")])]),t._v(" "),v("li",[v("p",[t._v("如果有数据，则比较他们的哈希值是否相同")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("如果哈希值不同，则添加成功")])]),t._v(" "),v("li",[v("p",[t._v("如果哈希值是相同的，则比较调用key 所在的equals比较是否相同")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("相同则替换相同key的value值。")])]),t._v(" "),v("li",[v("p",[t._v("不相同则添加成功")])])])])])])]),t._v(" "),v("p",[t._v("在JDK8中相较于在底层方面的不同")]),t._v(" "),v("p",[t._v("new hashmap底层没有创建一个长度为16的数组")]),t._v(" "),v("p",[t._v("jdk8底层的数组是nodep[],非entry数组")]),t._v(" "),v("p",[t._v("首次调用put方法时，底层去创建长度为16的数组")]),t._v(" "),v("p",[t._v("在jdk8中底层结构为数组+链表+红黑树")]),t._v(" "),v("p",[t._v("当数组某一个索引位置上以链表的形式存在的数据个数>8且当前数组的长度>64时，此时此索引位置上的所有数据会改成使用红黑树存储。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(425),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("LinkedHashMap")])]),t._v(" "),v("li",[v("p",[t._v("TreeMap")])]),t._v(" "),v("li",[v("p",[t._v("Hashtable")]),t._v(" "),v("p",[t._v("线程安全的，效率低。不可以存储null的key和value。")])]),t._v(" "),v("li",[v("p",[t._v("Properties")]),t._v(" "),v("p",[t._v("常用来处理配置文件。key和value都是string类型")])])])])]),t._v(" "),v("p",[v("strong",[t._v("范型")])]),t._v(" "),v("p",[t._v("范型方法不是在类中出现了类中指定的范型就是范型方法，范型方法是在方法中出现了范型结构。范型参数与类的范型参数没有关系。")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token generics"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),v("span",{pre:!0,attrs:{class:"token generics"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyFromArrayToList")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),v("p",[v("strong",[t._v("IO流")])]),t._v(" "),v("p",[t._v("流的体系")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("抽象基类")]),t._v(" "),v("th",[t._v("节点流")]),t._v(" "),v("th",[t._v("缓冲流")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("InputStream")]),t._v(" "),v("td",[t._v("FileInputStream")]),t._v(" "),v("td",[t._v("BufferedInputStream")])]),t._v(" "),v("tr",[v("td",[t._v("OutputStream")]),t._v(" "),v("td",[t._v("FileOutputStream")]),t._v(" "),v("td",[t._v("BufferedOutputStream")])]),t._v(" "),v("tr",[v("td",[t._v("Reader")]),t._v(" "),v("td",[t._v("FileReader")]),t._v(" "),v("td",[t._v("BufferedReader")])]),t._v(" "),v("tr",[v("td",[t._v("Writer")]),t._v(" "),v("td",[t._v("FileWriter")]),t._v(" "),v("td",[t._v("BufferedWriter")])])])]),t._v(" "),v("p",[v("strong",[t._v("反射")])]),t._v(" "),v("p",[v("img",{attrs:{src:s(426),alt:""}})]),t._v(" "),v("ul",[v("li",[v("p",[t._v("属性")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("getFields()获取当前运行时类及父类中声明为public的属性")])]),t._v(" "),v("li",[v("p",[t._v("getDeclaredFields()获取当前运行时类声明的所有属性（不包括父类的属性）")])])])]),t._v(" "),v("li",[v("p",[t._v("方法")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("getMethods()和属性是一样的")])]),t._v(" "),v("li",[v("p",[t._v("getDeclaredMethods()和属性是一样的")])])])])]),t._v(" "),v("p",[v("strong",[t._v("反射的应用")]),t._v("："),v("strong",[t._v("动态代理")])]),t._v(" "),v("p",[t._v("无论是动态代理还是静态代理，基本思路如下：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("先定义要实现接口")])]),t._v(" "),v("li",[v("p",[t._v("定义被代理类，被代理类实现接口")])]),t._v(" "),v("li",[v("p",[t._v("定义代理类，实现接口")])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("静态代理 编译时已经确定类型")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticton")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("//1、定义接口\ninterface ClothFactory{\npublic void productCloth();\n}\n//2、定义代理类\nclass ClothFactoryProxy implements ClothFactory{\nprivate ClothFactory clothFactory;\npublic ClothFactoryProxy(ClothFactory clothFactory){\nthis.clothFactory=clothFactory;\n}")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('  @Override\n  public void productCloth() {\n      System.out.println("做前致工作");\n      clothFactory.productCloth();\n      System.out.println("守候工作");\n  }\n')])])]),v("p",[t._v("}\n//3、定义被代理类\nclass NikeClothFactory implements ClothFactory{")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('  @Override\n  public void productCloth() {\n      System.out.println("我要做衣服");\n  }\n')])])]),v("p",[t._v("}\npublic class StaticProxyTest {\npublic static void main(String[] args) {\n//创建被代理类\nClothFactory nike = new NikeClothFactory();\n//创建代理类\nClothFactoryProxy clothFactoryProxy = new ClothFactoryProxy(nike);\nclothFactoryProxy.productCloth();\n}")]),t._v(" "),v("p",[t._v("}")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\n")])])])]),t._v(" "),v("li",[v("p",[t._v("动态代理 根据运行时来确定代理的类型")]),t._v(" "),v("div",{staticClass:"language-java extra-class"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticton")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("import java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;")]),t._v(" "),v("p",[t._v("//1、创建接口\ninterface HuMan{\npublic void eat(String food);\npublic String beSelf();\n}\n//2、创建被代理类\nclass SupperMan implements HuMan{")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('  @Override\n  public void eat(String food) {\n      System.out.println("chifanl"+food);\n  }\n\n  @Override\n  public String beSelf() {\n      return "I can fly";\n  }\n')])])]),v("p",[t._v("}\nclass MyInvocationHandler implements InvocationHandler {\nprivate Object object;\npublic MyInvocationHandler(Object object){\nthis.object = object;\n}\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\nreturn  method.invoke(object,args);\n}\n}\n//3、创建动态代理类\nclass ProxyFactory{\npublic static Object getProxyInstance(Object obj){\nMyInvocationHandler handler = new MyInvocationHandler(obj);\nreturn Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(),handler);\n}\n}")]),t._v(" "),v("p",[t._v('public class ProxyTest {\npublic static void main(String[] args) {\nSupperMan supperMan = new SupperMan();\nHuMan proxyInstance = (HuMan) ProxyFactory.getProxyInstance(supperMan);\nSystem.out.println(proxyInstance.beSelf());\nproxyInstance.eat("xxxxxx");\n}')]),t._v(" "),v("p",[t._v("}")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("\n")])])])])]),t._v(" "),v("p",[v("strong",[t._v("Lambda表达式")])]),t._v(" "),v("p",[t._v("→划分为左右两边")]),t._v(" "),v("p",[t._v("左边为形参列表、右边为方法体。分为以下几种情况")]),t._v(" "),v("p",[t._v("lambda本质：作为接口的实例")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("语法格式一：无参数、无返回值")]),t._v(" "),v("p",[v("img",{attrs:{src:s(427),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("语法格式二：需要一个参数、无返回值")]),t._v(" "),v("p",[v("img",{attrs:{src:s(428),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("语法格式三：数据类型可以省略、因为可由编译器推断得出，称为类型推断")]),t._v(" "),v("p",[v("img",{attrs:{src:s(429),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("语法格式四：只有一个参数时、参数的小括号可以省略")]),t._v(" "),v("p",[v("img",{attrs:{src:s(430),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("语法格式五：需要两个以上参数时、多条语句执行，并且可以有返回值")]),t._v(" "),v("p",[v("img",{attrs:{src:s(431),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("语法格式六：只有一条语句时，return与大括号若有，都可以省略。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(432),alt:""}})])])]),t._v(" "),v("p",[v("strong",[t._v("函数式接口")])]),t._v(" "),v("p",[t._v("若一个接口只含有一个方法时，它就是函数式接口，可以使用Lambda表达式实现。")]),t._v(" "),v("p",[t._v("JAVA内置四大核心函数式接口")]),t._v(" "),v("p",[v("img",{attrs:{src:s(433),alt:""}})]),t._v(" "),v("p",[v("img",{attrs:{src:s(434),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("Stream API")])]),t._v(" "),v("p",[t._v("Stream的中间操作")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("筛选与切片")]),t._v(" "),v("p",[v("img",{attrs:{src:s(435),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("映射")]),t._v(" "),v("p",[v("img",{attrs:{src:s(436),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("排序")]),t._v(" "),v("p",[v("img",{attrs:{src:s(437),alt:""}})])])]),t._v(" "),v("p",[t._v("Stream的中止操作")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("匹配与查找")]),t._v(" "),v("p",[v("img",{attrs:{src:s(438),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("归约")]),t._v(" "),v("p",[v("img",{attrs:{src:s(439),alt:""}})])]),t._v(" "),v("li",[v("p",[t._v("收集")]),t._v(" "),v("p",[v("img",{attrs:{src:s(440),alt:""}})])])]),t._v(" "),v("p",[v("strong",[t._v("Optional类")])]),t._v(" "),v("p",[t._v("为了避免出现空指针异常，可以使用此类来避免。")]),t._v(" "),v("p",[v("img",{attrs:{src:s(441),alt:""}})]),t._v(" "),v("p",[v("img",{attrs:{src:s(442),alt:""}})])])}),[],!1,null,null,null);a.default=n.exports}}]);